---
alwaysApply: true
---

# Cobalt Developer Documentation Writing Guide

This cursor rule file provides a definitive set of writing principles, tone guidelines, and structural patterns to write exceptional customer-facing developer documentation for Cobalt. It’s inspired by best-in-class documentation from leading AI and SaaS platforms like Anthropic, Stripe, Twilio, OpenAI, and others.

---

## 🧠 Author Mindset

Before you write, adopt this mindset:

- **You’re writing for a smart, busy developer.** They want to get something done—install, configure, integrate.
- **Assume they don’t know your product, but they know how to code.**
- **Your job is to guide, not impress.** Write the docs *you wish existed* the first time you used this feature.
- **Every sentence should help the reader move forward.** If it doesn’t, cut it.

---

## ✍️ Tone & Style

- **Use second person** (“you”) and active voice (“initialize the instance”).
- **Friendly, not casual.** Think: clear, confident, helpful—not jokey or robotic.
- **Plain English.** Prefer simple words: “use” over “utilize,” “get started” over “begin your journey.”
- **Present tense.** (“Call the API” not “The API can be called.”)
- **Short sentences.** 1 idea per sentence. 3–4 sentences max per paragraph.
- **Avoid jargon.** Only use technical terms when necessary—and define them.
- **No fluff.** Avoid words like “just,” “easily,” “simply,” and “obviously.” They frustrate readers.

✅ **Do:**

> You can test your API key using the Workbench tool.

❌ **Don’t:**

> In order to easily get started with your journey, we offer an intuitive and flexible Workbench feature.

---

## 📐 Structure & Formatting

All Cobalt documentation should follow this hierarchy and format:

### 1. **Quickstart or Introduction**

- Give the reader a win in 5 minutes or less.
- Include prerequisites, authentication, one working API or workflow example.
- Use numbered steps, bullets, and inline code blocks.
- Use **Mintlify `Steps`, `Callout`, and `Code` components** for clarity and visual structure.

### 2. **Conceptual Guides**

- Explain what something is, when/why to use it.
- Use diagrams or visuals if it helps clarify (but only if necessary).
- Link to relevant quickstarts and API references.
- Use `Callout` for tips and key differences.

### 3. **How-To Guides**

- Task-based walkthroughs (e.g. “Sync data to Sage Intacct”).
- Use imperative verbs and show the full flow.
- Use `Steps` for numbered flows and `Callout` for gotchas.

### 4. **API Reference or Configuration Options**

- Auto-generated or manually written JSON/YAML schemas.
- Include: endpoint/field, method/type, required?, example request/response.
- Use `CodeTabs` to support multiple languages or request/response separation.

---

## 💡 Patterns from Top Docs

**Anthropic:**
- Starts with a clear, focused goal: “Let’s learn how to use the Anthropic API…”
- Friendly language: “You’ll need…” and “Let’s call it!”
- Ends with helpful “Next Steps” suggestions.

**Stripe:**
- Two-column layout (text + code) helps scanning.
- Precise and compact wording, no filler.

**Twilio:**
- Step-by-step guides with code snippets in multiple languages.
- Highlights beginner-friendly and advanced paths.

**Slack:**
- Uses difficulty tags (“basic”, “advanced”).
- Visual callouts for tips or warnings.

**OpenAI:**
- Modular structure: one task = one guide.
- Example-driven and copy-paste friendly.

---

## 🔁 Best Practices

- **Always show a full example**, not partial snippets. Let readers copy-paste and run it.
- **Always end with a “What’s Next?”** link to related docs.
- **Include troubleshooting tips.** Don’t just show the happy path.
- **Version your docs** if APIs or workflows change.
- **Use consistent naming, casing, and terminology** across all pages.
- **Peer review all docs.** Treat them like production code.
- **Use Mintlify components** such as:
  - `Steps` for sequential guides
  - `Callout` for warnings or info
  - `Code`, `CodeTabs` for examples

---

## 🛠 Recommended Tools

- **Markdown + Git** – for version control and reviewable writing.
- **Linter/Grammar tools** – Grammarly, Vale, or WriteGood.
- **Mintlify** – Use Mintlify’s documentation platform with rich components to structure content clearly.

---

## ✅ Checklist Before You Publish

- [ ] Clear title and purpose
- [ ] One task per guide
- [ ] Copy-paste runnable code examples
- [ ] Simple, helpful language
- [ ] All terms defined or linked
- [ ] Consistent tone and formatting
- [ ] “What’s next” section included
- [ ] Peer-reviewed
- [ ] Mintlify components used where helpful (`Steps`, `Callout`, `Code`)

---

## 🧪 Example Snippet (Cobalt Style)

### Call a Cobalt Workflow

To trigger a workflow using our API:

```steps
1. Authenticate using your API key.
2. Make a POST request to `/v1/workflows/trigger`.

---

## Write for clarity.
## Write for action.
## Write for your fellow developer.

## This is the Cobalt way.